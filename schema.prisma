datasource db {
  provider          = "postgres"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING_SHADOW") // used for migrations
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String[] @default(["USER"])
  chats     Chat[]
  Vote      Vote[]
  Link      Link[]
}

model EmailCodes {
  email              String   @unique
  loginCode          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  loginCodeExpiresAt DateTime
  register           Boolean  @default(false)
  extraData          Json?
}

model ValuesCard {
  id                   Int                  @id @default(autoincrement())
  title                String
  instructionsShort    String
  instructionsDetailed String
  evaluationCriteria   String[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  canonicalCardId      Int?
  chatId               String               @unique
  chat                 Chat                 @relation(fields: [chatId], references: [id])
  canonicalCard        CanonicalValuesCard? @relation(fields: [canonicalCardId], references: [id])
}

model CanonicalValuesCard {
  id                   Int          @id @default(autoincrement())
  title                String
  instructionsShort    String
  instructionsDetailed String
  evaluationCriteria   String[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  valuesCards          ValuesCard[]
  linksFrom            Link[]       @relation("FromValuesRelation")
  linksTo              Link[]       @relation("ToValueRelation")
}

model Chat {
  id         String      @id
  userId     Int
  transcript Json
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  ValuesCard ValuesCard?
  user       User        @relation(fields: [userId], references: [id])
}

model Vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  options   Json
  user      User     @relation(fields: [userId], references: [id])
}

model Link {
  id          Int                 @id @default(autoincrement())
  linkType    String // TODO: enum
  fromValueId Int
  toValueId   Int
  userId      Int
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User                @relation(fields: [userId], references: [id])
  fromValue   CanonicalValuesCard @relation("FromValuesRelation", fields: [fromValueId], references: [id])
  toValue     CanonicalValuesCard @relation("ToValueRelation", fields: [toValueId], references: [id])
}
