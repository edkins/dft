datasource db {
  provider          = "postgres"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING_SHADOW") // used for migrations
  extensions        = [pgvector(map: "vector", schema: "extensions")] // Add the pgvector extension
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] // Enable the postgresqlExtensions. Currently in preview
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  name       String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  role       String[]     @default(["USER"])
  chats      Chat[]
  votes      Vote[]
  edges      Edge[]
  Impression Impression[]
}

model EmailCodes {
  email              String   @unique
  loginCode          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  loginCodeExpiresAt DateTime
  register           Boolean  @default(false)
  extraData          Json?
}

model ValuesCard {
  id                   Int                          @id @default(autoincrement())
  title                String
  instructionsShort    String
  instructionsDetailed String
  evaluationCriteria   String[]
  createdAt            DateTime                     @default(now())
  updatedAt            DateTime                     @updatedAt
  canonicalCardId      Int?
  chatId               String                       @unique
  chat                 Chat                         @relation(fields: [chatId], references: [id])
  canonicalCard        CanonicalValuesCard?         @relation(fields: [canonicalCardId], references: [id])
  embedding            Unsupported("vector(1536)")?
}

model CanonicalValuesCard {
  id                   Int                          @id @default(autoincrement())
  title                String
  instructionsShort    String
  instructionsDetailed String
  evaluationCriteria   String[]
  createdAt            DateTime                     @default(now())
  updatedAt            DateTime                     @updatedAt
  valuesCards          ValuesCard[]
  edgesFrom            Edge[]                       @relation("FromValuesRelation")
  edgesTo              Edge[]                       @relation("ToValueRelation")
  Vote                 Vote[]
  embedding            Unsupported("vector(1536)")?
  Impression           Impression[]
}

model Chat {
  id         String      @id
  userId     Int
  transcript Json
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  ValuesCard ValuesCard?
  user       User        @relation(fields: [userId], references: [id])
}

model Vote {
  id           Int                 @id @default(autoincrement())
  userId       Int
  valuesCardId Int
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  drawId       String // uuid for each draw of 6 values to be voted on.
  valuesCard   CanonicalValuesCard @relation(fields: [valuesCardId], references: [id])
  user         User                @relation(fields: [userId], references: [id])
}

model Impression {
  id           Int                 @id @default(autoincrement())
  userId       Int
  drawId       String // uuid for each draw of 6 values to be voted on.
  valuesCardId Int
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id])
  valuesCard   CanonicalValuesCard @relation(fields: [valuesCardId], references: [id])
}

model Edge {
  id           Int                 @id @default(autoincrement())
  userId       Int
  fromValueId  Int
  toValueId    Int
  relationship Relationship
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id])
  fromValue    CanonicalValuesCard @relation("FromValuesRelation", fields: [fromValueId], references: [id])
  toValue      CanonicalValuesCard @relation("ToValueRelation", fields: [toValueId], references: [id])
}

enum Relationship {
  more_comprehensive
  incommensurable
  dont_know
}
